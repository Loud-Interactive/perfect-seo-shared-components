'use client'
import { useEffect, useState } from "react"
import TextInput from "../Form/TextInput"
import { urlValidator } from "@/perfect-seo-shared-components/utils/validators"
import { updateLiveUrl } from "@/perfect-seo-shared-components/services/services"
import moment from "moment-timezone"
import * as Modal from '@/perfect-seo-shared-components/components/Modal/Modal'
import { useSelector } from "react-redux"
import { selectEmail } from "@/perfect-seo-shared-components/lib/features/User"
import { createClient } from "@/perfect-seo-shared-components/utils/supabase/client"
import { ContentType } from "@/perfect-seo-shared-components/data/types"
import Form from "../Form/Form"
import useForm from "@/perfect-seo-shared-components/hooks/useForm"
import StatusActionBar from "../StatusActionBar/StatusActionBar"

interface PostItemProps {
  post: any,
  refresh: () => void
  domain_name?: string
}

const PostItem = ({ post, domain_name, refresh }: PostItemProps) => {
  const email = useSelector(selectEmail)
  const [liveUrl, setLiveUrl] = useState(post?.live_post_url)
  const [localPost, setLocalPost] = useState(post)

  const [showLivePost, setShowLivePost] = useState(false)

  const form = useForm()



  const saveLiveUrl = () => {
    let url = liveUrl
    if (url) {
      if (form.validate({ requiredFields: ['live_url'], validatorFields: ['live_url'] })) {
        updateLiveUrl(localPost.content_plan_outline_guid, url || '')
          .then(res => {
            setLocalPost({ ...localPost, live_post_url: url })
            setShowLivePost(false)
          })
      }

    }
    else {
      updateLiveUrl(localPost.content_plan_outline_guid, '')
        .then(res => {
          setLocalPost({ ...localPost, live_post_url: '' })
          setShowLivePost(false)
        })
    }

  }

  const liveUrlChangeHandler = (e) => {
    setLiveUrl(e.target.value)
  }



  const supabase = createClient()

  useEffect(() => {
    console.log('useEffect: PostItem post?.task_id subscription');
    let contentPlanOutlines;
    if (post) {
      setLocalPost(post)
    }
    if (post?.task_id) {
      contentPlanOutlines = supabase.channel(`status-${post.task_id}`)
        .on(
          'postgres_changes',
          { event: '*', schema: 'public', table: 'tasks', filter: `task_id=eq.${post.task_id}` },
          (payload) => {
            if (payload?.new) {
              if (payload?.new && 'status' in payload.new) {
              }

              setLocalPost(payload.new)
            }
          }
        )
        .subscribe()
    }
    if (contentPlanOutlines) {
      return () => {
        contentPlanOutlines.unsubscribe()
      }
    }
  }, [post?.task_id])


  return (
    <div className="card p-2" title={post?.title}>
      <div className="row d-flex g-2 d-flex align-items-end">
        <div className="col">
          <div className="row g-2">
            <div className="col-12">
              <p className="mb-1">
                <small>
                  <strong className="text-primary ">Created</strong> {moment(`${localPost?.created_at}Z`).local().format("dddd, MMMM Do, YYYY h:mma")}
                  {/* {isAdmin ? <span className="text-primary ms-2">{localPost?.content_plan_outline_guid}</span> : null} */}
                </small>
                {localPost?.last_updated_at && <small>
                  <strong className="text-primary ms-3">Updated</strong> {moment(`${localPost?.last_updated_at}`).local().format("dddd, MMMM Do, YYYY h:mma")}
                  {/* {isAdmin ? <span className="text-primary ms-2">{localPost?.content_plan_outline_guid}</span> : null} */}
                  {!localPost?.content_plan_guid && <span className="badge bg-warning ms-2">Bulk</span>}
                </small>}
              </p>
              <p className="m-0">
                <strong className="text-primary me-1">Title</strong>  {localPost?.title}{(localPost?.writing_language !== 'English' && localPost?.writing_language) && <small>({localPost?.writing_language})</small>}
                <small>
                  {(localPost.client_domain !== domain_name) ? <span className='badge bg-light-blue text-dark ms-2'>{localPost?.client_name}</span> : email !== localPost.email ? <span className="ms-2 text-primary"><strong>generated by </strong><span className="text-dark">{localPost.email}</span></span> : null}
                </small>
              </p>
              {localPost?.live_post_url && <p className="m-0">  <strong className="text-primary me-1">Live URL</strong>  <a href={localPost?.live_post_url} target="_blank" title="View Live Post" className="text-dark no-underline"><i className="bi bi-link" /> {localPost?.live_post_url}</a><a className="text-small ms-2 text-primary" onClick={e => { e.preventDefault(); setShowLivePost(true) }} title="Edit URL">Edit URL</a></p>}
            </div>
          </div>
        </div>
        <div className="col-12">
          <StatusActionBar content_plan_outline_guid={localPost?.content_plan_outline_guid} type={ContentType?.POST} post={localPost} content_plan_post_id={localPost?.task_id} refresh={refresh} />
        </div>
      </div>
      <Modal.Overlay closeIcon open={showLivePost} onClose={() => setShowLivePost(false)} className="modal-small">
        <Modal.Title title="Add Live URL" />
        <div className="card p-3 w-100">
          <Form controller={form}>
            <TextInput type="url" fieldName="live_url" label="Live URL" value={liveUrl} onChange={liveUrlChangeHandler} validator={urlValidator} required
              button={<button className="btn btn-primary" onClick={saveLiveUrl} type="submit" ><i className="bi bi-floppy-fill" /></button>} />
          </Form>
        </div>
      </Modal.Overlay>

    </div>

  )
}

export default PostItem